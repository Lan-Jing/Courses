# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import md_server_pb2 as md__server__pb2


class md_serverStub(object):
    """This metadata server keeps track of available file servers
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.unary_unary(
                '/md_server/connect',
                request_serializer=md__server__pb2.empty.SerializeToString,
                response_deserializer=md__server__pb2.ms_reply.FromString,
                )
        self.disconnect = channel.unary_unary(
                '/md_server/disconnect',
                request_serializer=md__server__pb2.ms_reply.SerializeToString,
                response_deserializer=md__server__pb2.ms_reply.FromString,
                )
        self.online = channel.unary_unary(
                '/md_server/online',
                request_serializer=md__server__pb2.serverInfo.SerializeToString,
                response_deserializer=md__server__pb2.ms_reply.FromString,
                )
        self.offline = channel.unary_unary(
                '/md_server/offline',
                request_serializer=md__server__pb2.serverInfo.SerializeToString,
                response_deserializer=md__server__pb2.ms_reply.FromString,
                )
        self.listServer = channel.unary_unary(
                '/md_server/listServer',
                request_serializer=md__server__pb2.empty.SerializeToString,
                response_deserializer=md__server__pb2.serverInfoList.FromString,
                )


class md_serverServicer(object):
    """This metadata server keeps track of available file servers
    """

    def connect(self, request, context):
        """Make connections, assign unique id to clients
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disconnect(self, request, context):
        """The client returns id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def online(self, request, context):
        """An online file server should call this rpc periodically
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def offline(self, request, context):
        """Remove a given server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listServer(self, request, context):
        """Returns all online servers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_md_serverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.unary_unary_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=md__server__pb2.empty.FromString,
                    response_serializer=md__server__pb2.ms_reply.SerializeToString,
            ),
            'disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.disconnect,
                    request_deserializer=md__server__pb2.ms_reply.FromString,
                    response_serializer=md__server__pb2.ms_reply.SerializeToString,
            ),
            'online': grpc.unary_unary_rpc_method_handler(
                    servicer.online,
                    request_deserializer=md__server__pb2.serverInfo.FromString,
                    response_serializer=md__server__pb2.ms_reply.SerializeToString,
            ),
            'offline': grpc.unary_unary_rpc_method_handler(
                    servicer.offline,
                    request_deserializer=md__server__pb2.serverInfo.FromString,
                    response_serializer=md__server__pb2.ms_reply.SerializeToString,
            ),
            'listServer': grpc.unary_unary_rpc_method_handler(
                    servicer.listServer,
                    request_deserializer=md__server__pb2.empty.FromString,
                    response_serializer=md__server__pb2.serverInfoList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'md_server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class md_server(object):
    """This metadata server keeps track of available file servers
    """

    @staticmethod
    def connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/md_server/connect',
            md__server__pb2.empty.SerializeToString,
            md__server__pb2.ms_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/md_server/disconnect',
            md__server__pb2.ms_reply.SerializeToString,
            md__server__pb2.ms_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def online(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/md_server/online',
            md__server__pb2.serverInfo.SerializeToString,
            md__server__pb2.ms_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def offline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/md_server/offline',
            md__server__pb2.serverInfo.SerializeToString,
            md__server__pb2.ms_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/md_server/listServer',
            md__server__pb2.empty.SerializeToString,
            md__server__pb2.serverInfoList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
