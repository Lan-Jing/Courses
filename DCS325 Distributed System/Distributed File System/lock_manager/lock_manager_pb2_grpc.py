# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lock_manager_pb2 as lock__manager__pb2


class lock_managerStub(object):
    """This manager handles the simplest lock/unlock operations to the remote files
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.lock = channel.unary_unary(
                '/lock_manager/lock',
                request_serializer=lock__manager__pb2.fileInfo.SerializeToString,
                response_deserializer=lock__manager__pb2.lm_reply.FromString,
                )
        self.unlock = channel.unary_unary(
                '/lock_manager/unlock',
                request_serializer=lock__manager__pb2.fileInfo.SerializeToString,
                response_deserializer=lock__manager__pb2.lm_reply.FromString,
                )


class lock_managerServicer(object):
    """This manager handles the simplest lock/unlock operations to the remote files
    """

    def lock(self, request, context):
        """Attempt to get an exclusive lock to a given file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unlock(self, request, context):
        """Attempt to unlock the given file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_lock_managerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'lock': grpc.unary_unary_rpc_method_handler(
                    servicer.lock,
                    request_deserializer=lock__manager__pb2.fileInfo.FromString,
                    response_serializer=lock__manager__pb2.lm_reply.SerializeToString,
            ),
            'unlock': grpc.unary_unary_rpc_method_handler(
                    servicer.unlock,
                    request_deserializer=lock__manager__pb2.fileInfo.FromString,
                    response_serializer=lock__manager__pb2.lm_reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lock_manager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class lock_manager(object):
    """This manager handles the simplest lock/unlock operations to the remote files
    """

    @staticmethod
    def lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lock_manager/lock',
            lock__manager__pb2.fileInfo.SerializeToString,
            lock__manager__pb2.lm_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lock_manager/unlock',
            lock__manager__pb2.fileInfo.SerializeToString,
            lock__manager__pb2.lm_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
