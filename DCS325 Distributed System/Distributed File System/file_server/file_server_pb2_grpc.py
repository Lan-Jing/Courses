# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import file_server_pb2 as file__server__pb2


class file_serverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.pwd = channel.unary_unary(
                '/file_server/pwd',
                request_serializer=file__server__pb2.stringMes.SerializeToString,
                response_deserializer=file__server__pb2.stringMes.FromString,
                )
        self.ls = channel.unary_unary(
                '/file_server/ls',
                request_serializer=file__server__pb2.id.SerializeToString,
                response_deserializer=file__server__pb2.stringMes.FromString,
                )
        self.cd = channel.unary_unary(
                '/file_server/cd',
                request_serializer=file__server__pb2.stringMes.SerializeToString,
                response_deserializer=file__server__pb2.fs_reply.FromString,
                )
        self.mkdir = channel.unary_unary(
                '/file_server/mkdir',
                request_serializer=file__server__pb2.stringMes.SerializeToString,
                response_deserializer=file__server__pb2.fs_reply.FromString,
                )
        self.rm = channel.unary_unary(
                '/file_server/rm',
                request_serializer=file__server__pb2.stringMes.SerializeToString,
                response_deserializer=file__server__pb2.fs_reply.FromString,
                )
        self.upload = channel.unary_unary(
                '/file_server/upload',
                request_serializer=file__server__pb2.upRequest.SerializeToString,
                response_deserializer=file__server__pb2.fs_reply.FromString,
                )
        self.download = channel.unary_unary(
                '/file_server/download',
                request_serializer=file__server__pb2.downRequest.SerializeToString,
                response_deserializer=file__server__pb2.bufferMes.FromString,
                )


class file_serverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def pwd(self, request, context):
        """Get the current path of the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ls(self, request, context):
        """List files and sub-dirs in the current dir
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cd(self, request, context):
        """Create a new dir
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mkdir(self, request, context):
        """Upload a file to a given path
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rm(self, request, context):
        """Remove a file or an empty dir
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload(self, request, context):
        """Change current dir
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def download(self, request, context):
        """Download a file from a given path
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_file_serverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'pwd': grpc.unary_unary_rpc_method_handler(
                    servicer.pwd,
                    request_deserializer=file__server__pb2.stringMes.FromString,
                    response_serializer=file__server__pb2.stringMes.SerializeToString,
            ),
            'ls': grpc.unary_unary_rpc_method_handler(
                    servicer.ls,
                    request_deserializer=file__server__pb2.id.FromString,
                    response_serializer=file__server__pb2.stringMes.SerializeToString,
            ),
            'cd': grpc.unary_unary_rpc_method_handler(
                    servicer.cd,
                    request_deserializer=file__server__pb2.stringMes.FromString,
                    response_serializer=file__server__pb2.fs_reply.SerializeToString,
            ),
            'mkdir': grpc.unary_unary_rpc_method_handler(
                    servicer.mkdir,
                    request_deserializer=file__server__pb2.stringMes.FromString,
                    response_serializer=file__server__pb2.fs_reply.SerializeToString,
            ),
            'rm': grpc.unary_unary_rpc_method_handler(
                    servicer.rm,
                    request_deserializer=file__server__pb2.stringMes.FromString,
                    response_serializer=file__server__pb2.fs_reply.SerializeToString,
            ),
            'upload': grpc.unary_unary_rpc_method_handler(
                    servicer.upload,
                    request_deserializer=file__server__pb2.upRequest.FromString,
                    response_serializer=file__server__pb2.fs_reply.SerializeToString,
            ),
            'download': grpc.unary_unary_rpc_method_handler(
                    servicer.download,
                    request_deserializer=file__server__pb2.downRequest.FromString,
                    response_serializer=file__server__pb2.bufferMes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'file_server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class file_server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def pwd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_server/pwd',
            file__server__pb2.stringMes.SerializeToString,
            file__server__pb2.stringMes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_server/ls',
            file__server__pb2.id.SerializeToString,
            file__server__pb2.stringMes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_server/cd',
            file__server__pb2.stringMes.SerializeToString,
            file__server__pb2.fs_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mkdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_server/mkdir',
            file__server__pb2.stringMes.SerializeToString,
            file__server__pb2.fs_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_server/rm',
            file__server__pb2.stringMes.SerializeToString,
            file__server__pb2.fs_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_server/upload',
            file__server__pb2.upRequest.SerializeToString,
            file__server__pb2.fs_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def download(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_server/download',
            file__server__pb2.downRequest.SerializeToString,
            file__server__pb2.bufferMes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
