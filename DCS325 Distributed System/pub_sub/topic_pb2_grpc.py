# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import topic_pb2 as topic__pb2


class topicStub(object):
    """server of the pub/sub system that receive, store and distribute messages.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.publish = channel.unary_unary(
                '/topic.topic/publish',
                request_serializer=topic__pb2.pubMessage.SerializeToString,
                response_deserializer=topic__pb2.ack.FromString,
                )
        self.subscribe = channel.unary_unary(
                '/topic.topic/subscribe',
                request_serializer=topic__pb2.subscriberInfo.SerializeToString,
                response_deserializer=topic__pb2.messageList.FromString,
                )
        self.sub_ack = channel.unary_unary(
                '/topic.topic/sub_ack',
                request_serializer=topic__pb2.ack.SerializeToString,
                response_deserializer=topic__pb2.empty.FromString,
                )


class topicServicer(object):
    """server of the pub/sub system that receive, store and distribute messages.
    """

    def publish(self, request, context):
        """publisher publishes a message to the topic
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribe(self, request, context):
        """subscriber subscribes messages from the topic
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sub_ack(self, request, context):
        """subscriber responds to the topic
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_topicServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'publish': grpc.unary_unary_rpc_method_handler(
                    servicer.publish,
                    request_deserializer=topic__pb2.pubMessage.FromString,
                    response_serializer=topic__pb2.ack.SerializeToString,
            ),
            'subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribe,
                    request_deserializer=topic__pb2.subscriberInfo.FromString,
                    response_serializer=topic__pb2.messageList.SerializeToString,
            ),
            'sub_ack': grpc.unary_unary_rpc_method_handler(
                    servicer.sub_ack,
                    request_deserializer=topic__pb2.ack.FromString,
                    response_serializer=topic__pb2.empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'topic.topic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class topic(object):
    """server of the pub/sub system that receive, store and distribute messages.
    """

    @staticmethod
    def publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/topic.topic/publish',
            topic__pb2.pubMessage.SerializeToString,
            topic__pb2.ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/topic.topic/subscribe',
            topic__pb2.subscriberInfo.SerializeToString,
            topic__pb2.messageList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sub_ack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/topic.topic/sub_ack',
            topic__pb2.ack.SerializeToString,
            topic__pb2.empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
